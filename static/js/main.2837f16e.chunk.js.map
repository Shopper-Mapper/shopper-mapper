{"version":3,"sources":["components/assets/shopper-mapper-icon.png","components/assets/map.jpg","components/Header.js","components/SearchList.js","components/DirectionIcons.js","components/Directions.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","handleChangeLocation","e","setState","userInputlocation","target","value","handleChangeQuery","userInputQuery","state","this","handleClick","props","className","action","htmlFor","onChange","type","name","id","placeholder","onClick","event","icon","faSearch","src","require","alt","Component","SearchList","query","median","searchResult","address","currentTarget","length","map","results","index","includes","key","displayString","DirectionIcons","faArrowUp","faArrowRight","faArrowLeft","faArrowDown","Directions","directionsArray","handleBackButton","direction","narrative","faChevronCircleLeft","Main","children","API_KEY","App","searchResultsArray","queryList","item","middleLocation","join","findMiddle","Math","floor","highlightMedian","location","a","preventDefault","getQueries","axios","method","url","responseType","params","scalebar","locations","shape","size","mapData","mapImageData","URL","createObjectURL","data","swal","destinationClick","toAddress","destination","loading","from","to","then","response","route","legs","maneuvers","directions","start","end","directionsArr","searchResults","error","range","latLng","lat","lng","circle","pageSize","sort","q","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2837f16e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shopper-mapper-icon.87b087ac.png\";","module.exports = __webpack_public_path__ + \"static/media/map.e9e08731.jpg\";","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nclass Header extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInputlocation: '',\r\n            userInputQuery: '',\r\n        }\r\n    }\r\n\r\n    handleChangeLocation = (e) => {\r\n        this.setState({\r\n            userInputlocation: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleChangeQuery = (e) => {\r\n        this.setState({\r\n            userInputQuery: e.target.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { userInputlocation, userInputQuery } = this.state;\r\n        const { handleClick } = this.props;\r\n\r\n        return (\r\n            <header className=\"header\">\r\n                <form className=\"row\" action=\"\">\r\n                    <div className=\"header-search col-35\">\r\n                        <div>\r\n                            <div>\r\n                                <label className=\"sr-only\" htmlFor=\"searchLocation\">Enter location:</label>\r\n                                <input\r\n                                    className=\"input input-location\"\r\n                                    onChange={this.handleChangeLocation}\r\n                                    type=\"text\"\r\n                                    name=\"searchLocation\"\r\n                                    id=\"searchLocation\"\r\n                                    placeholder=\"Your location\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"sr-only\" htmlFor=\"searchQuery\">Enter query:</label>\r\n                                <input\r\n                                    className=\"input input-query\"\r\n                                    onChange={this.handleChangeQuery}\r\n                                    type=\"text\"\r\n                                    name=\"searchQuery\"\r\n                                    id=\"searchQuery\"\r\n                                    placeholder=\"Your query\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-auto header-search-btn\">\r\n                        <button\r\n                            className=\"button\"\r\n                            onClick={(event) => handleClick(event, userInputlocation, userInputQuery,)}\r\n                            type='submit'>\r\n                            <FontAwesomeIcon\r\n                                className=\"search-icon\"\r\n                                icon={faSearch}\r\n                            />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"sm-logo\">\r\n                        <h1>Shopper Mapper</h1>\r\n                        <img className=\"sm-icon\" src={require(\"./assets/shopper-mapper-icon.png\")} alt=\"Shopper Mapper Logo\" />\r\n                    </div>\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// Populate DOM with the list of searched queries\r\nconst SearchList = ({ onClick, query, median }) => {\r\n    const searchResult = (e) => {\r\n        const address = e.currentTarget.value;\r\n        onClick(address);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                query.length > 0 ?\r\n                    query.map((results, index) => {\r\n                        return (\r\n                            <button\r\n                                className={median.includes(index) ? \"query-btn highlighted\" : \"query-btn\"}\r\n                                key={results.id}\r\n                                id={results.id}\r\n                                value={results.displayString}\r\n                                onClick={searchResult}\r\n\r\n                            >{results.displayString}\r\n                            </button>\r\n                        )\r\n                    }\r\n                    )\r\n                    : <p>No results!</p>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SearchList;","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp, faArrowDown, faArrowLeft, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst DirectionIcons = () => {\r\n    return (\r\n        <ul className=\"row row--center directions-list\">\r\n            <li><FontAwesomeIcon className=\"back-icon directions-icon\" icon={faArrowUp} /></li>\r\n            <li><FontAwesomeIcon className=\"back-icon directions-icon\" icon={faArrowRight} /></li>\r\n            <li><FontAwesomeIcon className=\"back-icon directions-icon\" icon={faArrowLeft} /></li>\r\n            <li><FontAwesomeIcon className=\"back-icon directions-icon\" icon={faArrowDown} /></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default DirectionIcons;","import React from 'react';\r\nimport DirectionIcons from './DirectionIcons';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// Populate DOM with the list of directions\r\nconst Directions = ({ directionsArray, handleBackButton }) => {\r\n  return (\r\n    <div className=\"directions-container\">\r\n      <DirectionIcons />\r\n      {\r\n        directionsArray.map(direction => {\r\n          return (\r\n            <ul key={direction.index}>\r\n              <li className=\"query-item\">{direction.narrative}</li>\r\n            </ul>\r\n          )\r\n        })\r\n      }\r\n      <button\r\n        onClick={handleBackButton}\r\n        className=\"button directions-back-btn\">\r\n        <FontAwesomeIcon\r\n          className=\"back-icon\"\r\n          icon={faChevronCircleLeft}\r\n        />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Directions;","import React from 'react';\r\n\r\nconst Main = ({children}) => {\r\n    return (\r\n        <main>\r\n            {children}\r\n        </main>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport SearchList from './components/SearchList.js';\r\nimport Directions from './components/Directions.js';\r\nimport Main from './components/Main';\r\nimport swal from 'sweetalert';\r\n\r\n\r\n\r\nconst API_KEY = 'tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      queryList: [],\r\n      searchResults: false,\r\n      destination: '',\r\n      directions: [],\r\n      mapImageData: '',\r\n      location: '',\r\n      middleLocation: [],\r\n      range: 10000,\r\n      directionsArr: false,\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  //Make an axios request\r\n  async getQueries(location, query) {\r\n    // Show loading message \r\n    this.setState({\r\n      loading: true,\r\n    })\r\n    //  Pass lat/long from (Geocode Address API) here ↓ , in (Place Search API)\r\n    try {\r\n      // Retrieve coordinates data (lat, long) + await for a promise to be resolved\r\n      const { data: { results: [{ locations: [{ latLng: { lat, lng } }] }] } } = await axios({\r\n        url: `https://www.mapquestapi.com/geocoding/v1/address`,\r\n        method: \"GET\",\r\n        responseType: \"json\",\r\n        params: {\r\n          key: API_KEY,\r\n          location: location,\r\n        },\r\n      })\r\n\r\n      // Retrieve query results\r\n      const { data: { results } } = await axios({\r\n        url: `https://www.mapquestapi.com//search/v4/place`,\r\n        method: \"GET\",\r\n        responseType: \"json\",\r\n        params: {\r\n          // Passing long, lat from  (Get Geocode Address API see below) to check the response\r\n          circle: `${lng}, ${lat}, ${this.state.range}`,\r\n          pageSize: 20,\r\n          key: API_KEY,\r\n          sort: \"relevance\",\r\n          q: query,\r\n        },\r\n      })\r\n\r\n      // Update state with the results data from an API call\r\n      this.setState({\r\n        queryList: results,\r\n        searchResults: true,\r\n        location,\r\n        loading: false,\r\n      })\r\n      // Handle error if promise is rejected\r\n    } catch (error) {\r\n      swal(\"Error has occurred!\", `${error}`);\r\n    }\r\n  }\r\n\r\n  searchResultsArray = () => {\r\n    const locationMarkers = this.state.queryList.map((item, index) => {\r\n      return item.displayString + (this.state.middleLocation.includes(index) ? \"|marker-green\" : \"\");\r\n    }).join(\"||\");\r\n\r\n    return locationMarkers;\r\n  }\r\n\r\n  // Find middle item in an array\r\n  findMiddle = () => {\r\n    let median = Math.floor((this.state.queryList.length - 1) / 2);\r\n    let highlightMedian = [];\r\n\r\n    if (this.state.queryList.length % 2) {\r\n      highlightMedian = [median];\r\n    } else {\r\n      highlightMedian = [median, median + 1];\r\n    }\r\n    this.setState({\r\n      middleLocation: highlightMedian,\r\n    })\r\n  }\r\n\r\n  // On click get user inputs, pass it to the getQueries function\r\n  handleClick = async (e, location, query) => {\r\n    e.preventDefault();\r\n\r\n    await this.getQueries(location, query);\r\n\r\n    try {\r\n      this.findMiddle();\r\n\r\n      const mapData = await axios({\r\n        method: 'GET',\r\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n        responseType: 'blob',\r\n        params: {\r\n          key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\r\n          scalebar: 'true|bottom',\r\n          // passes the user current location and the query list addresses\r\n          locations: this.state.location + this.searchResultsArray(),\r\n          shape: `radius:10km|${this.state.location}`,\r\n          size: '600,600'\r\n        }\r\n      })\r\n\r\n      this.setState({\r\n        mapImageData: URL.createObjectURL(mapData.data),\r\n\r\n      })\r\n    } catch (error) {\r\n      swal(\"Error has occurred!\", `${error}`);\r\n    }\r\n  }\r\n\r\n  // Handle the directions when user clicks a destination\r\n  destinationClick = (toAddress) => {\r\n    this.setState({\r\n      destination: toAddress,\r\n      loading: true,\r\n    }, () => {\r\n      try {\r\n        axios({\r\n          url: \"https://www.mapquestapi.com/directions/v2/route\",\r\n          method: \"GET\",\r\n          responseType: \"json\",\r\n          params: {\r\n            key: API_KEY,\r\n            from: this.state.location,\r\n            to: this.state.destination,\r\n          }\r\n        }).then((response) => {\r\n          response = response.data.route.legs[0].maneuvers\r\n\r\n          this.setState({\r\n            directions: response,\r\n            loading: false,\r\n          })\r\n        })\r\n        // when user clicks on a destination button, it will render the map from the api call to show the route\r\n        axios({\r\n          method: 'GET',\r\n          url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n          responseType: 'blob',\r\n          params: {\r\n            key: API_KEY,\r\n            scalebar: 'true|bottom',\r\n            start: this.state.location,\r\n            end: this.state.destination,\r\n            size: '600,600'\r\n          }\r\n        }).then((response) => {\r\n          this.setState({\r\n            mapImageData: URL.createObjectURL(response.data),\r\n            directionsArr: true,\r\n            searchResults: false,\r\n          })\r\n        })\r\n      } catch (error) {\r\n        swal(\"Error has occurred!\", `${error}`);\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  // Update state\r\n  handleBackButton = (e) => {\r\n    e.preventDefault();\r\n    // show search results and hide directions arr\r\n    this.setState({\r\n      directionsArr: false,\r\n      searchResults: true,\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"container\">\r\n          <div className=\"col-80\">\r\n            <Header\r\n              handleClick={this.handleClick}\r\n            />\r\n            <Main>\r\n              <div className=\"row\">\r\n                <div className=\"search-list col-50\">\r\n                  {\r\n                    !this.state.queryList.length > 0\r\n                      ? <p className=\"main-intro\">Welcome to Shopper Mapper - for when you want to go somewhere average.\r\n                      Enter your location and what you’re looking for (e.g. museum, restaurant, cafe) and we’ll list options within 10km, highlighting what’s not too good, not too bad, but right in the middle.</p>\r\n                      : null}\r\n                  {\r\n                    this.state.loading\r\n                      ? <p className=\"main-loading\">Loading...</p>\r\n                      : null\r\n                  }\r\n                  {\r\n                    this.state.searchResults ?\r\n                      <SearchList\r\n                        query={this.state.queryList}\r\n                        median={this.state.middleLocation}\r\n                        onClick={this.destinationClick} />\r\n                      : null\r\n                  }\r\n                  {\r\n                    this.state.directionsArr\r\n                      ? <Directions handleBackButton={this.handleBackButton} directionsArray={this.state.directions} />\r\n                      : null\r\n                  }\r\n                </div>\r\n                <div className=\"col-50\">\r\n                  {this.state.mapImageData\r\n                    ? <img className=\"query-image\" src={this.state.mapImageData} alt=\"map\" />\r\n                    : <img className=\"query-image\" src={require(\"./components/assets/map.jpg\")} alt=\"anothermap\" />}\r\n                </div>\r\n              </div>\r\n            </Main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}