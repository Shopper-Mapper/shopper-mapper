{"version":3,"sources":["Form.js","SearchList.js","StaticMap.js","Directions.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleChangeLocation","e","console","log","target","value","setState","userInputlocation","handleChangeQuery","userInputQuery","state","className","action","htmlFor","onChange","this","type","name","id","placeholder","onClick","event","props","handleClick","icon","faGlobeAmericas","size","Component","SearchList","searchResult","address","currentTarget","query","length","map","results","key","displayString","StaticMap","mapImageData","axios","method","url","responseType","params","scalebar","locations","shape","mapData","URL","createObjectURL","data","src","alt","Directions","directionsArray","direction","index","narrative","API_KEY","App","location","a","preventDefault","getQueries","destinationClick","toAddress","destination","from","to","then","response","route","legs","maneuvers","directions","queryList","searchResults","latLng","lat","lng","sort","q","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.62cd9b6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGlobeAmericas } from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nclass Header extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            userInputlocation: '',\n            userInputQuery: '',\n        }\n    }\n\n    handleChangeLocation = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            userInputlocation: e.target.value,\n        })\n    }\n\n    handleChangeQuery = (e) => {\n        this.setState({\n            userInputQuery: e.target.value,\n        })\n    }\n\n\n    render() {\n        return (\n            <header className=\"header\">\n                <form className=\"row\" action=\"\">\n                    <div className=\"header-search col-auto\">\n                        <div>\n                            <label className=\"sr-only\" htmlFor=\"searchLocation\">Enter location:</label>\n                            <input className=\"input input-location\" onChange={this.handleChangeLocation} type=\"text\" name=\"searchLocation\" id=\"searchLocation\" placeholder=\"Your location\" />\n                        </div>\n                        <div>\n                            <label className=\"sr-only\" htmlFor=\"searchQuery\">Enter query:</label>\n                            <input className=\"input input-query\" onChange={this.handleChangeQuery} type=\"text\" name=\"searchQuery\" id=\"searchQuery\" placeholder=\"Your query\" />\n                        </div>\n                    </div>\n\n                    <div className=\"col-auto\">\n                        <button className=\"button\" onClick={(event) => this.props.handleClick(event, this.state.userInputlocation, this.state.userInputQuery,)} type='submit'><FontAwesomeIcon icon={faGlobeAmericas} size=\"2x\" /></button>\n                    </div>\n                </form>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass SearchList extends Component {\n\n    searchResult = (e) => {\n        const address = e.currentTarget.value;\n        this.props.onClick(address);\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                this.props.query.length > 0 ? \n                this.props.query.map (results => {\n                    return (\n                    <button key={results.id}\n                    id={results.id}\n                    value ={results.displayString}\n                    onClick={this.searchResult}>{results.displayString}</button>\n                    )\n                })\n                : <p>No results!</p>\n            }\n            </div>\n        )\n    }\n}\n\nexport default SearchList;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass StaticMap extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mapImageData: '',\n    }\n  }\n\n\n  async mapImage() {\n    try {\n          const mapData = await axios({\n            method: 'GET',\n            url: 'https://www.mapquestapi.com/staticmap/v5/map',\n            responseType: 'blob',\n            params: {\n              key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\n              scalebar: 'true|bottom',\n            //   start: `Toronto, ON`,\n            //   end: `Windsor, ON`,\n              locations: `43.6532,-79.3832||42.3149,-83.0364`,\n              shape: `radius:10km|Toronto, ON`,\n              size: '600,600'\n            }\n          })\n          \n          this.setState({\n            mapImageData : URL.createObjectURL(mapData.data),\n          })\n          //console.log (this.state.mapImageData)\n\n\n        } catch (error) {\n            console.log(`Axios ruquest is failed ${error}`);\n        }\n        \n  }\n\n  render() {\n    return (\n      <div>\n        <img src={this.props.mapImageData} alt=''/>\n      </div>\n    );\n  }\n}\nexport default StaticMap;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Directions extends Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.directionsArray.map(direction => {\n          return (\n            <ol key={direction.index}>\n              <li>{direction.narrative}</li>\n            </ol>\n          )\n        })}\n      </div>\n    )\n  }\n\n}\n\nexport default Directions;\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faGlobeAmericas } from \"@fortawesome/free-solid-svg-icons\";\n// import MapSearch from './MapSearch';\nimport Header from './Form';\nimport SearchList from './SearchList.js';\nimport StaticMap from './StaticMap.js';\nimport Directions from './Directions.js';\n\nconst API_KEY = 'tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      queryList: [],\n      searchResults: false,\n      destination: '',\n      directions: [],\n      mapImageData: '',\n    }\n  }\n\n  async componentDidMount() {\n\n  }\n\n\n  async getQueries(location, query) {\n    //  Pass lat/long from (Geocode Address API) here â†“ , in (Place Search API)\n    try {\n      // Retrieve coordinates data (lat, long) + await for a promise to be resolved\n      const { data: { results: [{ locations: [{ latLng: { lat, lng } }] }] } } = await axios({\n        url: `http://www.mapquestapi.com/geocoding/v1/address`,\n        method: \"GET\",\n        responseType: \"json\",\n        params: {\n          key: API_KEY,\n          location: location,\n        },\n      })\n\n      // Retrieve query results + await for a promise to be resolved\n      const { data: { results } } = await axios({\n        url: `http://www.mapquestapi.com//search/v4/place`,\n        method: \"GET\",\n        responseType: \"json\",\n        params: {\n          // Passing long, lat from  (Get Geocode Address API see below) to check the response\n          location: `${lng}, ${lat}`,\n          key: API_KEY,\n          sort: \"relevance\",\n          q: query,\n        },\n      })\n\n      // Update state with the results data from an API call\n      this.setState({\n        queryList: results,\n        searchResults: true,\n        location,\n        // coordinates: `${lng}, ${lat}`,\n      })\n\n      // Handle error if promise is rejected\n    } catch (error) {\n      console.log(`Axios request is failed ${error}`);\n    }\n  }\n\n\n  // Handle button click\n  handleClick = async (e, location, query) => {\n    e.preventDefault();\n\n    await this.getQueries(location, query);\n  }\n\n  // handles the directions when user clicks a destination\n  destinationClick = (toAddress) => {\n    this.setState({\n      destination: toAddress,\n    }, () => {\n      console.log(this.state.location);\n      console.log(this.state.destination);\n\n      try {\n        axios({\n          url: \"http://www.mapquestapi.com/directions/v2/route\",\n          method: \"GET\",\n          responseType: \"json\",\n          params: {\n            key: API_KEY,\n            from: this.state.location,\n            to: this.state.destination,\n          }\n        }).then((response) => {\n          response = response.data.route.legs[0].maneuvers\n\n          this.setState({\n            directions: response,\n          })\n          console.log(this.state.directions);\n        })\n\n      } catch (e) {\n        console.log(e);\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"wrapper\">\n          <div className=\"container\">\n\n\n            <h1 className=\"title\">Shopper - Mapper</h1>\n            <Header handleClick={this.handleClick} />\n\n            {\n              this.state.searchResults ?\n                <SearchList query={this.state.queryList}\n                  onClick={this.destinationClick} />\n                : <div />\n            }\n\n            <Directions directionsArray={this.state.directions} />\n\n            <StaticMap mapImageData={this.state.mapImageData} />\n            {/* <MapSearch queryList={this.state.queryList || []} coordinates={this.state.coordinates} /> */}\n            {/* <FontAwesomeIcon icon={faGlobeAmericas} size=\"2x\" /> */}\n            {/* <FontAwesomeIcon icon={faLinkedin} size=\"2x\" /> */}\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}