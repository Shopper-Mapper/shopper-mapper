{"version":3,"sources":["components/assets/map.jpg","components/Header.js","components/SearchList.js","components/Directions.js","components/StaticMap.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","handleChangeLocation","e","console","log","target","value","setState","userInputlocation","handleChangeQuery","userInputQuery","state","className","action","htmlFor","onChange","this","type","name","id","placeholder","onClick","event","props","handleClick","icon","faSearch","Component","SearchList","searchResult","address","currentTarget","query","length","map","results","index","median","includes","key","displayString","Directions","directionsArray","direction","narrative","Main","children","API_KEY","App","searchResultsArray","queryList","item","middleLocation","join","findMiddle","Math","floor","highlightMedian","location","a","preventDefault","getQueries","axios","method","url","responseType","params","scalebar","locations","shape","size","mapData","mapImageData","URL","createObjectURL","data","destinationClick","toAddress","destination","from","to","then","response","route","legs","maneuvers","directions","start","end","error","searchResults","range","latLng","lat","lng","circle","pageSize","sort","q","src","alt","require","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f4a91a66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.e9e08731.jpg\";","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch} from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nclass Header extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            userInputlocation: '',\n            userInputQuery: '',\n        }\n    }\n\n    handleChangeLocation = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            userInputlocation: e.target.value,\n        })\n    }\n\n    handleChangeQuery = (e) => {\n        this.setState({\n            userInputQuery: e.target.value,\n        })\n    }\n\n\n    render() {\n        return (\n            <header className=\"header\">\n                <form className=\"row\" action=\"\">\n                    <div className=\"header-search col-auto\">\n                        <div>\n                            <label className=\"sr-only\" htmlFor=\"searchLocation\">Enter location:</label>\n                            <input className=\"input input-location\" onChange={this.handleChangeLocation} type=\"text\" name=\"searchLocation\" id=\"searchLocation\" placeholder=\"Your location\" />\n                        </div>\n                        <div>\n                            <label className=\"sr-only\" htmlFor=\"searchQuery\">Enter query:</label>\n                            <input className=\"input input-query\" onChange={this.handleChangeQuery} type=\"text\" name=\"searchQuery\" id=\"searchQuery\" placeholder=\"Your query\" />\n                        </div>\n                    </div>\n\n                    <div className=\"col-auto header-search-btn\">\n                        <button className=\"button\" onClick={(event) => this.props.handleClick(event, this.state.userInputlocation, this.state.userInputQuery,)} type='submit'><FontAwesomeIcon className=\"search-icon\" icon={faSearch}/></button>\n                    </div>\n                </form>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass SearchList extends Component {\n\n    searchResult = (e) => {\n        const address = e.currentTarget.value;\n        this.props.onClick(address);\n    }\n    \n    render() {\n        return (\n            <div>\n\n                {\n                this.props.query.length > 0 ? \n                this.props.query.map ((results, index) => {\n                    return (\n\n                        <button className = { this.props.median.includes(index) ? \"query-btn highlighted\" : \"query-btn\"}\n                        key={results.id}\n                        id={results.id}\n                        value ={results.displayString}\n                        onClick={this.searchResult}\n\n                        >{results.displayString}\n                        </button>\n\n                    )\n                  }\n                )\n                : <p>No results!</p>\n            }\n          </div >\n        )\n    }\n}\n\nexport default SearchList;","import React, { Component } from 'react';\n\nclass Directions extends Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.directionsArray.map(direction => {\n          return (\n            <ol key={direction.index}>\n              <li>{direction.narrative}</li>\n            </ol>\n          )\n        })}\n      </div>\n    )\n  }\n\n}\n\nexport default Directions;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass StaticMap extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      mapImageData: '',\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const mapData = await axios({\n        method: 'GET',\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\n        responseType: 'blob',\n        params: {\n          key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\n          scalebar: 'true|bottom',\n        //   start: `Toronto, ON`,\n        //   end: `Windsor, ON`,\n          start: \"Royal Ontario Museum, 100 Queens Pk, TORONTO, ON M5S2C6\",\n          end: \"Art Gallery of Ontario, 317 Dundas Street E, Toronto, ON M5T\",\n          // locations: `43.6532,-79.3832||42.3149,-83.0364`,\n        //   shape: `radius:10km|Toronto, ON`,\n          size: '600,600'\n        }\n      })\n      \n      this.setState({\n        mapImageData : URL.createObjectURL(mapData.data),\n      })\n      //console.log (this.state.mapImageData)\n\n\n    } catch (error) {\n        console.log(`Axios ruquest is failed ${error}`);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <img src={this.props.mapImageData} alt=''/>\n      </div>\n    );\n  }\n}\nexport default StaticMap;","import React, { Component } from 'react';\n\n\nconst Main = ({children}) => {\n    return (\n        <main>\n            {children}\n        </main>\n    )\n}\n\n\n\nexport default Main;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './components/Header';\nimport SearchList from './components/SearchList.js';\nimport StaticMap from './components/StaticMap.js';\nimport Directions from './components/Directions.js';\nimport Main from './Main';\n\nconst API_KEY = 'tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      queryList: [],\n      searchResults: false,\n      destination: '',\n      directions: [],\n      mapImageData: '',\n      location: '',\n      middleLocation: [],\n      range: 10000,\n    }\n  }\n\n\n  async getQueries(location, query) {\n    //  Pass lat/long from (Geocode Address API) here ↓ , in (Place Search API)\n    try {\n      // Retrieve coordinates data (lat, long) + await for a promise to be resolved\n      const { data: { results: [{ locations: [{ latLng: { lat, lng } }] }] } } = await axios({\n        url: `https://www.mapquestapi.com/geocoding/v1/address`,\n        method: \"GET\",\n        responseType: \"json\",\n        params: {\n          key: API_KEY,\n          location: location,\n        },\n      })\n\n      // Retrieve query results + await for a promise to be resolved\n      const { data: { results } } = await axios({\n        url: `https://www.mapquestapi.com//search/v4/place`,\n        method: \"GET\",\n        responseType: \"json\",\n        params: {\n          // Passing long, lat from  (Get Geocode Address API see below) to check the response\n          circle: `${lng}, ${lat}, ${this.state.range}`,\n          pageSize: 20,\n          key: API_KEY,\n          sort: \"relevance\",\n          q: query,\n        },\n      })\n\n      // Update state with the results data from an API call\n      this.setState({\n        queryList: results,\n        searchResults: true,\n        location,\n      })\n      // Handle error if promise is rejected\n    } catch (error) {\n      console.log(`Axios request is failed ${error}`);\n    }\n  }\n\n  // function to map through the queryList array and to convert to a string\n  // as well, use the method includes() to determine if the value of the index passing matches with what is stored in middleLocation\n  // if the current index is in highlighted locations, appending a special marker if so\n  // '||' is mapquest api's way of a comma to separate addresses\n  searchResultsArray = () => {\n    const locationMarkers = this.state.queryList.map((item, index) => {\n      return item.displayString + (this.state.middleLocation.includes(index) ? \"|marker-red\" : \"\");\n    }).join(\"||\");\n\n    return locationMarkers;\n  }\n\n  // function to find the median of the query list array\n  // if odd, return one number\n  // else, return two numbers (even)\n  // it will be stored into the variable \"highlightMedian\" which will be stored in the state \"middleLocation\"\n  findMiddle = () => {\n    let median = Math.floor((this.state.queryList.length - 1) /2);\n    let highlightMedian = [];\n\n    if(this.state.queryList.length % 2) {\n        highlightMedian = [median];\n    } else {\n        highlightMedian = [median, median + 1];\n    }\n    this.setState({\n      middleLocation: highlightMedian,\n    })\n  }\n\n  // Handle button click\n  handleClick = async (e, location, query) => {\n    e.preventDefault();\n\n    await this.getQueries(location, query);\n    // when user inputs location and query\n    // have the map to render the user location and query list with markers\n    try {\n      // calls the function findMiddle()\n      this.findMiddle();\n\n      const mapData = await axios({\n        method: 'GET',\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\n        responseType: 'blob',\n        params: {\n          key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\n          scalebar: 'true|bottom',\n          // passes the user current location and the query list addresses\n          locations: this.state.location + this.searchResultsArray(),\n          shape: `radius:10km|${this.state.location}`,\n          size: '600,600'\n        }\n      })\n\n      this.setState({\n        mapImageData: URL.createObjectURL(mapData.data),\n      })\n    } catch (error) {\n      console.log(`Axios request is failed ${error}`);\n    }\n\n  }\n\n  // handles the directions when user clicks a destination\n  destinationClick = (toAddress) => {\n    this.setState({\n      destination: toAddress,\n    }, () => {\n      try {\n        axios({\n          url: \"https://www.mapquestapi.com/directions/v2/route\",\n          method: \"GET\",\n          responseType: \"json\",\n          params: {\n            key: API_KEY,\n            from: this.state.location,\n            to: this.state.destination,\n          }\n        }).then((response) => {\n          response = response.data.route.legs[0].maneuvers\n\n          this.setState({\n            directions: response,\n          })\n        })// when user clicks on a destination button, it will render the map from the api call to show the route\n        axios({\n          method: 'GET',\n          url: 'https://www.mapquestapi.com/staticmap/v5/map',\n          responseType: 'blob',\n          params: {\n            key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\n            scalebar: 'true|bottom',\n            start: this.state.location,\n            end: this.state.destination,\n            size: '600,600'\n          }\n        }).then((response) => {\n          this.setState({\n            mapImageData: URL.createObjectURL(response.data),\n          })\n        })\n      } catch (error) {\n        console.log(`Axios request is failed ${error}`);\n      }\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"col-80\">\n            <Header handleClick={this.handleClick} />\n            <Main>\n              <div className=\"row\">\n                <div className=\"search-list col-50\">\n                  {\n                    this.state.searchResults ?\n                      <SearchList query={this.state.queryList} median={this.state.middleLocation}\n                        onClick={this.destinationClick} />\n                      : <p>Loading...</p>\n                  }\n                </div>\n                <div className=\"col-50\">\n                  {this.state.mapImageData ? <img className=\"query-image\" src={this.state.mapImageData} alt=\"map\" /> : <img className=\"query-image\" src={require (\"./components/assets/map.jpg\")} alt=\"anothermap\" />}\n                </div>\n              </div>\n              <Directions directionsArray={this.state.directions} />\n            </Main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}