{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["Map","state","mapImageData","axios","method","url","responseType","params","key","scalebar","locations","size","mapData","this","setState","URL","createObjectURL","data","console","log","src","Component","App","queryFromApi","userInputlocation","location","sort","q","results","latLng","lat","lng","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAkDeA,G,wDA9Cb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,aAAc,IAJJ,E,yMAWgBC,IAAM,CAC1BC,OAAQ,MACRC,IAAK,+CACLC,aAAc,OACdC,OAAQ,CACNC,IAAI,mCACJC,SAAU,cAGVC,UAAU,qCAEVC,KAAM,a,OAXJC,E,OAeNC,KAAKC,SAAS,CACZZ,aAAea,IAAIC,gBAAgBJ,EAAQK,Q,gDAM3CC,QAAQC,IAAR,yC,8IAMR,OACE,6BACE,yBAAKC,IAAOP,KAAKZ,MAAMC,oB,GA1CbmB,cC6EHC,E,kDAzEb,aAAe,IAAD,8BACZ,gBAEKrB,MAAQ,CACXsB,aAAc,GACdC,kBAAmB,IALT,E,uNAc0BrB,IAAM,CACxCE,IAAK,8CACLD,OAAQ,MACRE,aAAc,OACdC,OAAQ,CAENkB,SAAU,wBACVjB,IAAK,mCACLkB,KAAM,YAENC,EAAG,gB,gBAVSC,E,EAARX,KAAQW,QAchBV,QAAQC,IAAIS,GAGZf,KAAKC,SAAS,CACZS,aAAcK,I,gDAKhBV,QAAQC,IAAR,yC,mCAMiFhB,IAAM,CACrFE,IAAI,kDACJD,OAAQ,MACRE,aAAc,OACdC,OAAQ,CACNC,IAAK,mCAELiB,SAAU,gB,iCAPNR,KAAQW,Q,sBAAYlB,U,UAAcmB,OAAUC,E,EAAAA,IAAKC,E,EAAAA,IAYzDb,QAAQC,IAAIW,EAAKC,G,mDAIjBb,QAAQC,IAAR,yC,sJAKF,OACE,6BACE,gDACA,kBAAC,EAAD,W,GArEUE,aCOEW,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.85c180b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Map extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      mapImageData: '',\r\n    }\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    try {\r\n          const mapData = await axios({\r\n            method: 'GET',\r\n            url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n            responseType: 'blob',\r\n            params: {\r\n              key: `RSBH9KbMvmkRzdRkD8Joil8TqbXW3HvB`,\r\n              scalebar: 'true|bottom',\r\n            //   start: `Toronto, ON`,\r\n            //   end: `Windsor, ON`,\r\n              locations: `43.6532,-79.3832||42.3149,-83.0364`,\r\n            //   shape: `radius:10km|Toronto, ON`,\r\n              size: '600,600'\r\n            }\r\n          })\r\n          \r\n          this.setState({\r\n            mapImageData : URL.createObjectURL(mapData.data),\r\n          })\r\n          //console.log (this.state.mapImageData)\r\n\r\n\r\n        } catch (error) {\r\n            console.log(`Axios ruquest is failed ${error}`);\r\n        }\r\n        \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src = {this.state.mapImageData}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Map;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport Map from './Map.js';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      queryFromApi: [],\r\n      userInputlocation: '',\r\n    }\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    //  Pass lat/long from (Geocode Address API) here â†“ , in (Place Search API)\r\n    try {\r\n      // Retrieve query results + await for a promise to be resolved\r\n      const { data: { results } } = await axios({\r\n        url: \"http://www.mapquestapi.com//search/v4/place\",\r\n        method: \"GET\",\r\n        responseType: \"JSON\",\r\n        params: {\r\n          // Passing long, lat from  (Get Geocode Address API see below) to check the response\r\n          location: \"-79.381713, 43.651893\",\r\n          key: \"RSBH9KbMvmkRzdRkD8Joil8TqbXW3HvB\",\r\n          sort: \"relevance\",\r\n          // By default is museum, we'll interpolate user input instead\r\n          q: \"restaurant\",\r\n        }\r\n      })\r\n\r\n      console.log(results);\r\n\r\n      // Update state with the results data from an API call\r\n      this.setState({\r\n        queryFromApi: results,\r\n      })\r\n\r\n      // Handle error if promise is rejected\r\n    } catch (error) {\r\n      console.log(`Axios ruquest is failed ${error}`);\r\n    }\r\n\r\n    // Get Geocode Address ( longtitude, latitude) based on user input\r\n    try {\r\n      // Retrieve coordinates data (lat, long) + await for a promise to be resolved\r\n      const { data: { results: [{ locations: [{ latLng: { lat, lng } }] }] } } = await axios({\r\n        url: `http://www.mapquestapi.com/geocoding/v1/address`,\r\n        method: \"GET\",\r\n        responseType: \"JSON\",\r\n        params: {\r\n          key: \"RSBH9KbMvmkRzdRkD8Joil8TqbXW3HvB\",\r\n          // Default value, insted we'll interpolate user input\r\n          location: \"Toronto,ON\",\r\n        }\r\n      })\r\n\r\n\r\n      console.log(lat, lng); // lat long\r\n\r\n      // Handle error if promise is rejected\r\n    } catch (error) {\r\n      console.log(`Axios ruquest is failed ${error}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Shopper - Mapper</h1>\r\n        <Map/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}