{"version":3,"sources":["Form.js","SearchList.js","Directions.js","StaticMap.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleChangeLocation","e","console","log","target","value","setState","userInputlocation","handleChangeQuery","userInputQuery","state","className","action","htmlFor","onChange","this","type","name","id","placeholder","onClick","event","props","handleClick","icon","faGlobeAmericas","size","Component","SearchList","searchResult","address","currentTarget","query","length","map","results","key","displayString","Directions","directionsArray","direction","index","narrative","API_KEY","App","location","a","preventDefault","getQueries","axios","method","url","responseType","params","scalebar","locations","queryList","shape","mapData","mapImageData","URL","createObjectURL","data","destinationClick","toAddress","destination","from","to","then","response","route","legs","maneuvers","directions","start","end","searchResults","latLng","lat","lng","sort","q","Form","src","faLinkedin","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f3edb8ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGlobeAmericas } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\nclass Header extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            userInputlocation: '',\r\n            userInputQuery: '',\r\n        }\r\n    }\r\n\r\n    handleChangeLocation = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            userInputlocation: e.target.value,\r\n        })\r\n    }\r\n\r\n    handleChangeQuery = (e) => {\r\n        this.setState({\r\n            userInputQuery: e.target.value,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"header\">\r\n                <form className=\"row\" action=\"\">\r\n                    <div className=\"header-search col-auto\">\r\n                        <div>\r\n                            <label className=\"sr-only\" htmlFor=\"searchLocation\">Enter location:</label>\r\n                            <input className=\"input input-location\" onChange={this.handleChangeLocation} type=\"text\" name=\"searchLocation\" id=\"searchLocation\" placeholder=\"Your location\" />\r\n                        </div>\r\n                        <div>\r\n                            <label className=\"sr-only\" htmlFor=\"searchQuery\">Enter query:</label>\r\n                            <input className=\"input input-query\" onChange={this.handleChangeQuery} type=\"text\" name=\"searchQuery\" id=\"searchQuery\" placeholder=\"Your query\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-auto\">\r\n                        <button className=\"button\" onClick={(event) => this.props.handleClick(event, this.state.userInputlocation, this.state.userInputQuery,)} type='submit'><FontAwesomeIcon icon={faGlobeAmericas} size=\"2x\" /></button>\r\n                    </div>\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass SearchList extends Component {\r\n\r\n    searchResult = (e) => {\r\n        const address = e.currentTarget.value;\r\n        this.props.onClick(address);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                this.props.query.length > 0 ? \r\n                this.props.query.map (results => {\r\n                    return (\r\n                    <button key={results.id}\r\n                    id={results.id}\r\n                    value ={results.displayString}\r\n                    onClick={this.searchResult}>{results.displayString}</button>\r\n                    )\r\n                })\r\n                : <p>No results!</p>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchList;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Directions extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.directionsArray.map(direction => {\r\n          return (\r\n            <ol key={direction.index}>\r\n              <li>{direction.narrative}</li>\r\n            </ol>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Directions;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass StaticMap extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      mapImageData: '',\r\n    }\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const mapData = await axios({\r\n        method: 'GET',\r\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n        responseType: 'blob',\r\n        params: {\r\n          key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\r\n          scalebar: 'true|bottom',\r\n        //   start: `Toronto, ON`,\r\n        //   end: `Windsor, ON`,\r\n          start: \"Royal Ontario Museum, 100 Queens Pk, TORONTO, ON M5S2C6\",\r\n          end: \"Art Gallery of Ontario, 317 Dundas Street E, Toronto, ON M5T\",\r\n          // locations: `43.6532,-79.3832||42.3149,-83.0364`,\r\n        //   shape: `radius:10km|Toronto, ON`,\r\n          size: '600,600'\r\n        }\r\n      })\r\n      \r\n      this.setState({\r\n        mapImageData : URL.createObjectURL(mapData.data),\r\n      })\r\n      //console.log (this.state.mapImageData)\r\n\r\n\r\n    } catch (error) {\r\n        console.log(`Axios ruquest is failed ${error}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src={this.props.mapImageData} alt=''/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default StaticMap;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons';\r\nimport { faGlobeAmericas } from \"@fortawesome/free-solid-svg-icons\";\r\n// import MapSearch from './MapSearch';\r\nimport Form from './Form';\r\nimport SearchList from './SearchList.js';\r\nimport StaticMap from './StaticMap.js';\r\nimport Directions from './Directions.js';\r\n\r\nconst API_KEY = 'tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      queryList: [],\r\n      searchResults: false,\r\n      destination: '',\r\n      directions: [],\r\n      mapImageData: '',\r\n      location: '',\r\n    }\r\n  }\r\n\r\n\r\n  async getQueries(location, query) {\r\n    //  Pass lat/long from (Geocode Address API) here ↓ , in (Place Search API)\r\n    try {\r\n      // Retrieve coordinates data (lat, long) + await for a promise to be resolved\r\n      const { data: { results: [{ locations: [{ latLng: { lat, lng } }] }] } } = await axios({\r\n        url: `http://www.mapquestapi.com/geocoding/v1/address`,\r\n        method: \"GET\",\r\n        responseType: \"json\",\r\n        params: {\r\n          key: API_KEY,\r\n          location: location,\r\n        },\r\n      })\r\n\r\n      // Retrieve query results + await for a promise to be resolved\r\n      const { data: { results } } = await axios({\r\n        url: `http://www.mapquestapi.com//search/v4/place`,\r\n        method: \"GET\",\r\n        responseType: \"json\",\r\n        params: {\r\n          // Passing long, lat from  (Get Geocode Address API see below) to check the response\r\n          location: `${lng}, ${lat}`,\r\n          key: API_KEY,\r\n          sort: \"relevance\",\r\n          q: query,\r\n        },\r\n      })\r\n\r\n      // Update state with the results data from an API call\r\n      this.setState({\r\n        queryList: results,\r\n        searchResults: true,\r\n        location,\r\n        // coordinates: `${lng}, ${lat}`,\r\n      })\r\n\r\n      // Handle error if promise is rejected\r\n    } catch (error) {\r\n      console.log(`Axios request is failed ${error}`);\r\n    }\r\n  }\r\n\r\n  // function to map through the queryList array *Someone fix please\r\n  // searchResultsArray = () => {\r\n  //   // return this.state.queryList\r\n\r\n  //   let searchResults = this.state.queryList.map( => {\r\n\r\n  //   })\r\n\r\n  // }\r\n\r\n  // Handle button click\r\n  handleClick = async (e, location, query) => {\r\n    e.preventDefault();\r\n\r\n    await this.getQueries(location, query);\r\n    // when user inputs location and query\r\n    // have the map to render the user location and query list with markers\r\n    try {\r\n      const mapData = await axios({\r\n        method: 'GET',\r\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n        responseType: 'blob',\r\n        params: {\r\n          key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\r\n          scalebar: 'true|bottom',\r\n          // passes the user current location and the query list addresses\r\n          // this can be obtained by grabbing the displayString that holds the address\r\n          // replace ${this.state.queryList[0].displayString} with the function call above\r\n          locations: `${this.state.location} || ${this.state.queryList[0].displayString}`,\r\n          shape: `radius:10km|${this.state.location}`,\r\n          size: '600,600'\r\n        }\r\n      })\r\n      console.log(this.state.queryList);\r\n      // console.log(this.state.queryList.displayString);\r\n      \r\n      this.setState({\r\n        mapImageData : URL.createObjectURL(mapData.data),\r\n      })\r\n      //console.log (this.state.mapImageData)\r\n\r\n\r\n    } catch (error) {\r\n        console.log(`Axios request is failed ${error}`);\r\n    }\r\n  }\r\n  \r\n  // handles the directions when user clicks a destination\r\n  destinationClick = (toAddress) => {\r\n    this.setState({\r\n      destination: toAddress,\r\n    }, () => {\r\n    console.log (this.state.location);\r\n    console.log (this.state.destination);\r\n\r\n    try {\r\n      axios({\r\n        url: \"http://www.mapquestapi.com/directions/v2/route\",\r\n        method: \"GET\",\r\n        responseType: \"json\",\r\n        params: {\r\n          key: API_KEY,\r\n          from: this.state.location,\r\n          to: this.state.destination,\r\n        }\r\n      }).then((response) => {\r\n        response = response.data.route.legs[0].maneuvers\r\n\r\n        this.setState({\r\n          directions: response,\r\n        })\r\n        console.log(this.state.directions);\r\n      })// when user clicks on a destination button, it will render the map from the api call to show the route\r\n        axios({\r\n          method: 'GET',\r\n          url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n          responseType: 'blob',\r\n          params: {\r\n            key: `tZVntk8rKYnj1VeUAi4cTD6mGHgEoP15`,\r\n            scalebar: 'true|bottom',\r\n            start: this.state.location,\r\n            end: this.state.destination,\r\n            size: '600,600'\r\n          }\r\n        }).then( (response) => {\r\n          this.setState({\r\n            mapImageData: URL.createObjectURL(response.data),\r\n            \r\n          })\r\n          console.log(response.data)\r\n        })      \r\n    } catch (e){\r\n      console.log(e);\r\n    }\r\n  })\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Shopper - Mapper</h1>\r\n\r\n        <Form handleClick={this.handleClick} />\r\n\r\n        {\r\n          this.state.searchResults ?\r\n        <SearchList query={this.state.queryList}\r\n        onClick={this.destinationClick}/>\r\n        : <div/>\r\n        }\r\n\r\n        <Directions directionsArray={this.state.directions}/>\r\n\r\n        {/* <StaticMap/> */}\r\n        <img src={this.state.mapImageData} />\r\n        {/* <MapSearch queryList={this.state.queryList || []} coordinates={this.state.coordinates} /> */}\r\n        <FontAwesomeIcon icon={faGlobeAmericas} size=\"2x\" />\r\n        <FontAwesomeIcon icon={faLinkedin} size=\"2x\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}